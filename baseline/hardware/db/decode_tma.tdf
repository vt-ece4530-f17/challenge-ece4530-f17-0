--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:07:19:18:07:03:SJ cbx_lpm_add_sub 2017:07:19:18:07:03:SJ cbx_lpm_compare 2017:07:19:18:07:03:SJ cbx_lpm_decode 2017:07:19:18:07:03:SJ cbx_mgl 2017:07:19:18:10:29:SJ cbx_nadder 2017:07:19:18:07:03:SJ cbx_stratix 2017:07:19:18:07:03:SJ cbx_stratixii 2017:07:19:18:07:03:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode817w[1..0]	: WIRE;
	w_anode826w[3..0]	: WIRE;
	w_anode843w[3..0]	: WIRE;
	w_anode853w[3..0]	: WIRE;
	w_anode863w[3..0]	: WIRE;
	w_anode873w[3..0]	: WIRE;
	w_anode883w[3..0]	: WIRE;
	w_anode893w[3..0]	: WIRE;
	w_anode903w[3..0]	: WIRE;
	w_anode915w[1..0]	: WIRE;
	w_anode922w[3..0]	: WIRE;
	w_anode933w[3..0]	: WIRE;
	w_anode943w[3..0]	: WIRE;
	w_anode953w[3..0]	: WIRE;
	w_anode963w[3..0]	: WIRE;
	w_anode973w[3..0]	: WIRE;
	w_anode983w[3..0]	: WIRE;
	w_anode993w[3..0]	: WIRE;
	w_data815w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode993w[3..3], w_anode983w[3..3], w_anode973w[3..3], w_anode963w[3..3], w_anode953w[3..3], w_anode943w[3..3], w_anode933w[3..3], w_anode922w[3..3]), ( w_anode903w[3..3], w_anode893w[3..3], w_anode883w[3..3], w_anode873w[3..3], w_anode863w[3..3], w_anode853w[3..3], w_anode843w[3..3], w_anode826w[3..3]));
	w_anode817w[] = ( (w_anode817w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode826w[] = ( (w_anode826w[2..2] & (! w_data815w[2..2])), (w_anode826w[1..1] & (! w_data815w[1..1])), (w_anode826w[0..0] & (! w_data815w[0..0])), w_anode817w[1..1]);
	w_anode843w[] = ( (w_anode843w[2..2] & (! w_data815w[2..2])), (w_anode843w[1..1] & (! w_data815w[1..1])), (w_anode843w[0..0] & w_data815w[0..0]), w_anode817w[1..1]);
	w_anode853w[] = ( (w_anode853w[2..2] & (! w_data815w[2..2])), (w_anode853w[1..1] & w_data815w[1..1]), (w_anode853w[0..0] & (! w_data815w[0..0])), w_anode817w[1..1]);
	w_anode863w[] = ( (w_anode863w[2..2] & (! w_data815w[2..2])), (w_anode863w[1..1] & w_data815w[1..1]), (w_anode863w[0..0] & w_data815w[0..0]), w_anode817w[1..1]);
	w_anode873w[] = ( (w_anode873w[2..2] & w_data815w[2..2]), (w_anode873w[1..1] & (! w_data815w[1..1])), (w_anode873w[0..0] & (! w_data815w[0..0])), w_anode817w[1..1]);
	w_anode883w[] = ( (w_anode883w[2..2] & w_data815w[2..2]), (w_anode883w[1..1] & (! w_data815w[1..1])), (w_anode883w[0..0] & w_data815w[0..0]), w_anode817w[1..1]);
	w_anode893w[] = ( (w_anode893w[2..2] & w_data815w[2..2]), (w_anode893w[1..1] & w_data815w[1..1]), (w_anode893w[0..0] & (! w_data815w[0..0])), w_anode817w[1..1]);
	w_anode903w[] = ( (w_anode903w[2..2] & w_data815w[2..2]), (w_anode903w[1..1] & w_data815w[1..1]), (w_anode903w[0..0] & w_data815w[0..0]), w_anode817w[1..1]);
	w_anode915w[] = ( (w_anode915w[0..0] & data_wire[3..3]), enable_wire);
	w_anode922w[] = ( (w_anode922w[2..2] & (! w_data815w[2..2])), (w_anode922w[1..1] & (! w_data815w[1..1])), (w_anode922w[0..0] & (! w_data815w[0..0])), w_anode915w[1..1]);
	w_anode933w[] = ( (w_anode933w[2..2] & (! w_data815w[2..2])), (w_anode933w[1..1] & (! w_data815w[1..1])), (w_anode933w[0..0] & w_data815w[0..0]), w_anode915w[1..1]);
	w_anode943w[] = ( (w_anode943w[2..2] & (! w_data815w[2..2])), (w_anode943w[1..1] & w_data815w[1..1]), (w_anode943w[0..0] & (! w_data815w[0..0])), w_anode915w[1..1]);
	w_anode953w[] = ( (w_anode953w[2..2] & (! w_data815w[2..2])), (w_anode953w[1..1] & w_data815w[1..1]), (w_anode953w[0..0] & w_data815w[0..0]), w_anode915w[1..1]);
	w_anode963w[] = ( (w_anode963w[2..2] & w_data815w[2..2]), (w_anode963w[1..1] & (! w_data815w[1..1])), (w_anode963w[0..0] & (! w_data815w[0..0])), w_anode915w[1..1]);
	w_anode973w[] = ( (w_anode973w[2..2] & w_data815w[2..2]), (w_anode973w[1..1] & (! w_data815w[1..1])), (w_anode973w[0..0] & w_data815w[0..0]), w_anode915w[1..1]);
	w_anode983w[] = ( (w_anode983w[2..2] & w_data815w[2..2]), (w_anode983w[1..1] & w_data815w[1..1]), (w_anode983w[0..0] & (! w_data815w[0..0])), w_anode915w[1..1]);
	w_anode993w[] = ( (w_anode993w[2..2] & w_data815w[2..2]), (w_anode993w[1..1] & w_data815w[1..1]), (w_anode993w[0..0] & w_data815w[0..0]), w_anode915w[1..1]);
	w_data815w[2..0] = data_wire[2..0];
END;
--VALID FILE
